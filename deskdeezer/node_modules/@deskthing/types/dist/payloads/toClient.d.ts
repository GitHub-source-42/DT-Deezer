import { Action, ActionReference } from "../actions.js";
import { AppDataInterface, SavedData, ServerEvent } from "../app.js";
import { Client } from "../client.js";
import { MusicEventPayloads } from "../music.js";
import { AppSettings } from "../settings.js";
import { Step, Task } from "../tasks.js";
export type BaseEventPayload = {
    type: string;
    request?: string;
    payload?: unknown;
};
export type DefaultEventPayloads = {
    type: ServerEvent.TASKS;
    request: "update";
    payload: Record<string, Task>;
} | {
    type: ServerEvent.TASKS;
    request: "step";
    payload: Step;
} | {
    type: ServerEvent.TASKS;
    request: "task";
    payload: Task;
} | {
    type: ServerEvent.CLIENT_STATUS;
    request: "connected";
    payload: Client;
} | {
    type: ServerEvent.CLIENT_STATUS;
    request: "connections";
    payload: Client[];
} | {
    type: ServerEvent.CLIENT_STATUS;
    request: "disconnected";
    payload: string;
} | {
    type: ServerEvent.CLIENT_STATUS;
    request: "opened";
    payload: Client;
} | {
    type: ServerEvent.CLIENT_STATUS;
    request: "closed";
    payload: Client;
} | {
    type: ServerEvent.SETTINGS;
    request?: string;
    payload: AppSettings;
} | {
    type: ServerEvent.ACTION;
    request: string;
    payload: Action | ActionReference;
} | {
    type: ServerEvent.MESSAGE;
    request: string;
    payload: string;
} | {
    type: ServerEvent.DATA;
    request?: string;
    payload: SavedData;
} | {
    type: ServerEvent.APPDATA;
    request?: string;
    payload: AppDataInterface;
} | {
    type: ServerEvent.GET;
    request: string;
    payload: any;
} | {
    type: ServerEvent.SET;
    request: string;
    payload: any;
} | {
    type: ServerEvent.CALLBACK_DATA;
    request?: string;
    payload: string;
} | {
    type: ServerEvent.START;
    request?: string;
    payload?: undefined;
} | {
    type: ServerEvent.STOP;
    request?: undefined;
    payload?: undefined;
} | {
    type: ServerEvent.PURGE;
    request: undefined;
    payload?: undefined;
} | {
    type: ServerEvent.INPUT;
    request: string;
    payload: Record<string, string>;
} | {
    type: ServerEvent.CONFIG;
    request?: string;
    payload: any;
} | MusicEventPayloads;
/**
 * Generic event payload
 *
 * Used for events that are sent from the DeskThing Server to the App Server
 * @template T - The type of the payload
 * @param {T} data - The payload data
 * @returns {T} - The payload data
 * @example
 * const data = { type: "hello", request: "world", payload: { name: "John" } } as EventPayload<{ type: "hello"; request: "world"; payload: { name: string } }>;
 * if (data.type === "hello") {
 *   console.log(data.payload.name);
 * }
 *
 * @example
 * const data = { type: "hello", request: "world", payload: { name: "John" } } as EventPayload<{ type: "hello"; request: "world"; payload: { name: string } }>;
 * if (data.type === "hello") {
 *   console.log(data.payload.name);
 * }
 */
export type EventPayload<T extends BaseEventPayload = never> = {
    connectionId?: string;
} & (DefaultEventPayloads | T);
