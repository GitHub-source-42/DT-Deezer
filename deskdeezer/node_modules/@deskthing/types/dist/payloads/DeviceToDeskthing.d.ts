import { Action, ActionReference } from "../actions";
import { ClientManifest } from "../client";
import { MusicEventPayloads } from "../music";
import { AppSettings, SettingsType } from "../settings";
import { Log } from "../utils";
import { EventPayload } from "./toClient";
export declare enum DEVICE_EVENTS {
    MANIFEST = "manifest",
    ACTION = "action",
    SET = "set",
    PING = "ping",
    PONG = "pong",
    SETTINGS = "settings",
    LOG = "log",
    VIEW = "view",
    APP_PAYLOAD = "app_payload"
}
export type DeviceToDeskthing = {
    deviceId?: string;
} & (({
    app: "client";
} & {
    type: DEVICE_EVENTS.PING | DEVICE_EVENTS.PONG;
}) | ({
    app: "server";
} & ({
    type: DEVICE_EVENTS.SET;
    request: "update_pref_index";
    payload: {
        app: string;
        index: number;
    };
} | {
    type: DEVICE_EVENTS.ACTION;
    request?: string;
    payload: Action | ActionReference;
} | {
    type: DEVICE_EVENTS.MANIFEST;
    request?: string;
    payload: ClientManifest;
} | {
    type: DEVICE_EVENTS.PING | DEVICE_EVENTS.PONG;
} | {
    type: DEVICE_EVENTS.LOG;
    request?: string;
    payload: Log;
} | {
    type: DEVICE_EVENTS.VIEW;
    request?: "change";
    payload: {
        currentApp: string;
        previousApp: string;
    };
})) | MusicEventPayloads | ({
    app: string;
} & ({
    type: DEVICE_EVENTS.ACTION;
    request?: string;
    payload: Action | ActionReference;
} | {
    type: DEVICE_EVENTS.SETTINGS;
    request: "update";
    payload: {
        id: string;
        value: SettingsType["value"];
    };
} | {
    type: DEVICE_EVENTS.SETTINGS;
    request: "set";
    payload: AppSettings;
} | {
    type: DEVICE_EVENTS.APP_PAYLOAD;
    payload: EventPayload;
})));
