import { Action, ActionReference, ButtonMapping, EventMode } from "./actions.js";
import { MusicEventPayloads, SongData } from "./music.js";
import { AppSettings } from "./settings.js";
import { AppManifest, LOGGING_LEVELS } from "./utils.js";
export declare enum ClientConnectionMethod {
    Unknown = 0,
    LAN = 1,
    Localhost = 2,
    ADB = 3,
    NDIS = 4,
    Bluetooth = 5,
    Internet = 6
}
export declare enum ClientPlatformIDs {
    Unknown = 0,
    Desktop = 1,
    Tablet = 2,
    Iphone = 3,
    CarThing = 4
}
export type ClientDeviceType = {
    method: ClientConnectionMethod;
    id: ClientPlatformIDs;
    name: string;
};
/**
 * @module deskthing/client
 * @description The Client Manifest which holds details such as
 * the name, version, device, ip, etc regarding the current client
 */
export type ClientManifest = {
    name: string;
    id: string;
    short_name: string;
    description: string;
    builtFor: string;
    reactive: boolean;
    repository: string;
    author: string;
    version: string;
    version_code: number;
    compatible_server: number[];
    port: number;
    ip: string;
    device_type: ClientDeviceType;
};
/**
 * The client object that keeps track of connected clients
 */
export type Client = Partial<ClientManifest> & {
    id: string;
    hostname?: string;
    headers?: Record<string, string>;
    userAgent?: string;
    connectionId: string;
    connected: boolean;
    adbId?: string;
    timestamp: number;
    currentApp?: string;
    miniplayer?: string;
    default_view?: string;
};
/**
 * @module deskthing/client
 * @description
 * The ClientPreferences object that holds the preferences for the current client
 * @deprecated This will be removed in a future version in favor of Profiles
 *
 */
export interface ClientPreferences {
    miniplayer?: MiniplayerSettings;
    appTrayState: ViewMode;
    volume: VolMode;
    theme?: Theme;
    currentView?: App;
    ShowNotifications: boolean;
    Screensaver: App;
    ScreensaverType: ScreensaverSettings;
    onboarding: boolean;
    showPullTabs: boolean;
    saveLocation: boolean;
    use24hour: boolean;
}
/**
 * @module deskthing/client
 * @description
 * Settings for configuring the screensaver behavior and appearance
 */
export interface ScreensaverSettings {
    version: number;
    type: "black" | "logo" | "clock";
}
/**
 * @module deskthing/client
 * @description
 * Settings for configuring the miniplayer appearance and behavior
 */
export interface MiniplayerSettings {
    state: ViewMode;
    visible: boolean;
    position: "bottom" | "left" | "right";
}
/**
 * @module deskthing/client
 * @description
 * Theme configuration settings for customizing the application appearance
 */
export interface Theme {
    primary: string;
    textLight: string;
    textDark: string;
    icons: string;
    background: string;
    scale: "small" | "medium" | "large";
}
/**
 * @module deskthing/client
 * @description
 * Volume mode enum used for configuring volume control behavior
 * @see {@link ClientPreferences.volume}
 */
export declare enum VolMode {
    WHEEL = "wheel",
    SLIDER = "slider",
    BAR = "bar"
}
/**
 * @module deskthing/client
 * @description
 * View mode enum used for configuring display states
 * @see {@link ClientPreferences.appTrayState}
 * @see {@link MiniplayerSettings.state}
 */
export declare enum ViewMode {
    HIDDEN = "hidden",
    PEEK = "peek",
    FULL = "full"
}
/**
 * @module deskthing/client
 * @description
 * The App interface that determines how apps are held in the client
 */
export type App = {
    name: string;
    enabled: boolean;
    running: boolean;
    timeStarted: number;
    prefIndex: number;
    meta?: AppMeta;
    manifest?: AppManifest;
};
/**
 * Meta information about the app to be used by the server when parsing
 */
export interface AppMeta {
    version: string;
    verified: boolean;
    verifiedManifest: boolean;
    updateAvailable: boolean;
    updateChecked: boolean;
    updateAvailableVersion?: string;
}
/**
 * @module deskthing/client
 * @description
 * The interface used for running functions like
 * ```ts
 * DeskThing.triggerKey(key: KeyTrigger)
 * ```
 */
export type KeyTrigger = {
    key: string;
    mode: EventMode;
    source?: string;
};
/**
 * You generally do not have to worry about this
 */
export declare enum ToDeviceDataEvents {
    GET = "get",
    ACTION = "action",
    BUTTON = "button",
    KEY = "key",
    LOG = "log"
}
type BaseClientData = {
    app: 'client';
} & ({
    type: ToDeviceDataEvents.GET;
    request: 'manifest';
    payload?: string;
} | {
    type: ToDeviceDataEvents.GET;
    request: 'music';
    payload?: string;
} | {
    type: ToDeviceDataEvents.GET;
    request: 'settings';
    payload?: string;
} | {
    type: ToDeviceDataEvents.GET;
    request: 'apps';
    payload?: string;
} | {
    type: ToDeviceDataEvents.GET;
    request: 'key';
    payload: KeyTrigger;
} | {
    type: ToDeviceDataEvents.GET;
    request: 'action';
    payload: Action | ActionReference;
} | {
    type: ToDeviceDataEvents.ACTION;
    request?: undefined;
    payload: Action | ActionReference;
} | {
    type: ToDeviceDataEvents.KEY;
    request?: string;
    payload: KeyTrigger;
} | {
    type: ToDeviceDataEvents.LOG;
    request: LOGGING_LEVELS;
    payload?: {
        message: string;
        data?: any[];
    };
});
export type ToDeviceData = BaseClientData | MusicEventPayloads & {
    app?: string;
};
/**
 * You generally do not have to worry about this
 */
export declare enum FromDeviceDataEvents {
    MANIFEST = "manifest",
    MUSIC = "music",
    SETTINGS = "settings",
    APPS = "apps",
    ACTION = "action",
    TIME = "time",
    ICON = "icon"
}
/**
 * All data that is sent from the DeskThing Server to the Client
 * @package DeskThingServer + DeskThingClient
 */
export declare enum FromDeskthingToDeviceEvents {
    /** Will never be emitted to your client. Only exists on device */
    GLOBAL_SETTINGS = "global_settings",
    /** Will never be emitted to your client. Only exists on device */
    MAPPINGS = "button_mappings",
    /** Will never be emitted to your client. Only exists on device */
    GET = "get",
    /** Will never be emitted to your client. Only exists on device */
    ERROR = "error",
    PONG = "pong",
    PING = "ping",
    HEARTBEAT = "heartbeat"
}
/**
 * A generic data type for app-defined unspecified data being sent from the Device (from the app server) to the App Client
 * @param app cannot equal 'client'
 */
export type FromDeviceDataGeneric = {
    app: string;
    type: string;
    payload?: any;
    request?: string;
};
/**
 * This only exists on the server / client during transit. Apps do not interact with this
 * @package DeskThingServer + DeskThingClient
 */
export type CombinedMappings = ButtonMapping & {
    actions: Action[] | null;
};
/**
 * Data sent from the Device to the Client. Can be used to recreate accurate time data
 * @since 0.11.0
 */
export type FromDeviceTimeData = {
    utcTime: number;
    timezoneOffset: number;
};
/**
 * All data that is sent from the Device to the Client
 * @package DeskThingClient + App Client
 */
export type FromDeviceDataClient = {
    app: 'client';
} & ({
    type: FromDeviceDataEvents.MANIFEST;
    request?: string;
    payload: ClientManifest;
} | {
    type: FromDeviceDataEvents.MUSIC;
    request?: string;
    payload: SongData;
} | {
    type: FromDeviceDataEvents.SETTINGS;
    request?: string;
    payload: AppSettings & {
        app?: string;
    };
} | {
    type: FromDeviceDataEvents.APPS;
    request?: string;
    payload: App[];
} | {
    type: FromDeviceDataEvents.ACTION;
    request?: string;
    payload: Action;
} | {
    type: FromDeviceDataEvents.TIME;
    request: 'set';
    payload: string | FromDeviceTimeData;
} | {
    type: FromDeviceDataEvents.ICON;
    request: 'set';
    payload: {
        action: Action;
        icon: string;
        source: string;
    };
});
/**
 * All data that is being sent from the DeskThing Server to the Client
 */
export type FromDeskthingToDevice = {
    app: 'client';
} & ({
    type: FromDeskthingToDeviceEvents.GLOBAL_SETTINGS;
    request?: string;
    payload: Record<string, AppSettings>;
} | {
    type: FromDeskthingToDeviceEvents.MAPPINGS;
    request?: string;
    payload: CombinedMappings;
} | {
    type: FromDeskthingToDeviceEvents.GET;
    request: 'manifest';
    payload?: string;
} | {
    type: FromDeskthingToDeviceEvents.ERROR;
    request?: string;
    payload?: string;
} | {
    type: FromDeskthingToDeviceEvents.PONG;
    request?: string;
    payload?: string;
} | {
    type: FromDeskthingToDeviceEvents.PING;
    request?: string;
    payload?: string;
} | {
    type: FromDeskthingToDeviceEvents.HEARTBEAT;
    request?: string;
    payload?: string;
});
/**
 * Intended for being sent from the DeskThing Server to the Client
 */
export type SendToDeviceFromServerPayload<T extends string> = T extends 'client' ? FromDeviceDataClient | FromDeskthingToDevice : FromDeviceDataGeneric;
export type FromDeviceData = FromDeviceDataClient | FromDeviceDataGeneric;
export {};
