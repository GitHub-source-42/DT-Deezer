export declare class ImageHandler {
    private imageUrls;
    private logger;
    constructor(logger: (level: string, message: string) => void);
    /**
     * Save an image from a URL, file path, or data URL
     */
    saveImageReference(url: string, appId: string, headers?: Record<string, string>): Promise<string | null>;
    /**
     * Get image data from different sources (URL, file, data URL)
     */
    private getImageSource;
    /**
     * Check if a URL is a local file path
     */
    private isLocalPath;
    /**
     * Extract image data from a data URL
     */
    private getImageFromDataUrl;
    /**
     * Read image data from a local file
     */
    private getImageFromFile;
    /**
     * Fetch image data from a remote URL with retry mechanism
     */
    private getImageFromRemoteUrl;
    /**
     * Process the image: validate content type and determine extension
     */
    private processImage;
    /**
     * Standardize extensions for common formats
     */
    private normalizeExtension;
    /**
     * Detect content type from buffer using magic numbers
     */
    private detectContentTypeFromBuffer;
    /**
     * Save image buffer to disk
     */
    private saveImageToDisk;
}
//# sourceMappingURL=imageHandler.d.ts.map